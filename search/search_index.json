{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arganic","text":"<p>Arganic is a simple and lightweight Python library making it easy to manage Arguments for Classes, Methods or Functions.</p> <p>The library provides a very simple and comprehensive set of decorators with advanced features such as required arguments, validators, type checking, read/write accesses, default values, and choices.</p> <p>By leveraging Python's <code>*args</code> and <code>**kwargs</code>, Arganic empowers developers to enhance the readability and functionality of their codebase with ease.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li>Decorators for Classes, Methods, and Functions: Apply decorators to classes, methods, and functions to extend their functionality and behavior.</li> <li>Required Parameters: Define required parameters for methods and functions to ensure essential inputs are provided.</li> <li>Validator Support: Validate method arguments, function parameters, and class properties using built-in or custom validators.</li> <li>Type Checking: Enforce type constraints and ensure type consistency with flexible type checking capabilities.</li> <li>Read/Write Access Control: Define read-only properties for classes, methods, and functions as needed.</li> <li>Default Values: Set default values for function arguments, method parameters, and class properties to streamline code logic.</li> <li>Choice Selection: Specify a list of choices for method arguments and function parameters, restricting input values to predefined options.</li> </ul> <p> Read the full documentation </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"Pip","text":"<p>Install Arganic via the pip command:</p> <pre><code>pip install arganic\n</code></pre>"},{"location":"#git-clone","title":"Git clone","text":"<p>Clone the github repository:</p> <pre><code>git clone https://github.com/Kiwea/arganic\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#decorators","title":"Decorators","text":"<p>Arganic provides 3 distinct types of decorators:</p> <ul> <li><code>@class_properties</code> : A decorator for class properties allowing you to define the data managed by the class during construction and then access these values within the class.</li> <li><code>@method_arguments</code> : A decorator for class methods allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the method.</li> <li><code>@function_arguments</code> : A decorator for functions allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the function.</li> </ul>"},{"location":"#decorating-class-and-method","title":"Decorating Class and Method","text":"<p>Example of a <code>class decorator</code> and a <code>method</code> of the same class, they can be used independently or together.</p> <p>When initializing the class or calling the method, the values provided will be validated according to the parameters provided in the decorator.</p> <p>Info</p> <p>It is important to note that if we wish to decorate a class, it must extend the base class <code>ArgumentHandler</code>, so it will implement the methods <code>set()</code>, <code>get()</code> and the property <code>values</code> allowing access to property values.</p> <p>Within the method it is also possible to access the values of the arguments and thus benefit from the processing carried out, such for example as finding a <code>default value</code> if no one was provided from the call.</p> <p>Info</p> <p>It's also important to note that the <code>methods</code>, <code>functions</code> or <code>classes</code> that are decorated have the arguments <code>*args</code> and <code>**kwargs</code> declared in their signatures.  Currently support for other arguments in the signature is not supported.</p> A simple Vehicle class decorated with three properties, and his decorated method drive() .<pre><code>from arganic.arguments import (\n    class_properties,\n    method_arguments,\n    Argument,\n    ArgumentHandler\n)\n\n\n@class_properties(\n    name=Argument(\n        type=str,\n    ),\n    type=Argument(\n        type=str,\n        choices=('car', 'truck', 'bike'),\n        default='car'\n    ),\n    description=Argument(\n        type=str,\n        required=False\n    ),\n)\nclass Vehicle(ArgumentHandler):\n    \"\"\"\n    A class that manage Vehicles.\n    \"\"\"\n    def __init__(self, *args, **kwargs) -&gt; None:\n        super().__init__(*args, **kwargs)\n\n    def get_properties(self) -&gt; dict:\n        print(self.values) # Validated values\n        return self.values\n\n    @method_arguments(\n        start=Argument(\n            type=str\n        ),\n        destination=Argument(\n            type=str\n        )\n    )\n    def drive(self, *args, **kwargs) -&gt; dict:\n        \"\"\"\n        Drive the vehicle\n        \"\"\"\n        print(self.drive.arguments.values) # Validated values\n        return self.drive.arguments.values\n\n\ncar_1 = Vehicle(name=\"Red car\")\ncar_1.drive(start='Geneva', destination='Paris')\nbike_1 = Vehicle(name=\"Yellow bike\", type=\"bike\")\nbike_1.drive(start='Lyon', destination='Geneva')\ntruck_1 = Vehicle(name=\"Blue truck\", type=\"truck\", description=\"Very heavy truck.\")\ntruck_1.drive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"#decorating-class-method-and-a-function","title":"Decorating Class, Method and a function","text":"<p>Another example with also a simple function and some validating options.</p> Another full-featured example decorating Class, Method and Function.<pre><code>from arganic.arguments import (\n    class_properties,\n    method_arguments,\n    function_arguments,\n    ArgumentHandler,\n    Argument\n)\nfrom arganic.validators import (\n    File,\n    Dir,\n    Email,\n    Url,\n    MaxLength,\n    MinLength\n)\n\n\n@class_properties(\n    int_prop=Argument(\n        type=int,\n        default=1,\n        read_only=False\n    ),\n    is_required=Argument(),\n    is_choices=Argument(\n        type=str,\n        choices=('a', 'b', 'c'),\n        required=False\n    ),\n    is_dir=Argument(\n        type=str,\n        required=False,\n        validator=Dir()\n    ),\n    is_file=Argument(\n        type=str,\n        required=False,\n        validator=File()\n    )\n)\nclass DecoratedClass(ArgumentHandler):\n\n    def __init__(self, *args, **kwargs) -&gt; None:\n        super().__init__(*args, **kwargs)\n        print(self.get('int_prop'))\n\n    def get_int_prop(self) -&gt; int:\n        return self.get('int_prop')\n\n    @method_arguments(\n        first_arg=Argument(\n            type=float\n        ),\n        second_arg=Argument(\n            type=str,\n            validator=(MinLength(2), MaxLength(4)),\n            required=False\n        ),\n        email=Argument(\n            type=str,\n            validator=Email(),\n            required=False\n        ),\n        url=Argument(\n            type=str,\n            validator=Url(),\n            required=False\n        )\n    )\n    def decorated_method(self, *args, **kwargs) -&gt; float:\n        return self.decorated_method.arguments.get('first_arg')\n\n\n@function_arguments(\n    arg_1=Argument(\n        type=str\n    ),\n    arg_2=Argument(\n        type=(int, float),\n        required=False\n    )\n)\ndef decorated_function(*args, **kwargs) -&gt; str:\n    return decorated_function.arguments.get('arg_1')\n</code></pre>"},{"location":"#arguments-parameters","title":"Arguments parameters","text":"<p>Another example of a class decorated with a full-featured property.</p> <p>List of the available parameters the <code>Argument</code> can take:</p> <ul> <li>default: (<code>Any</code>, <code>optional</code>) - The default value the argument will take if no value is provided.</li> <li>read_only: (<code>bool</code>, <code>Default=True</code>) - The argument is read-only, so it can no longer be modified.</li> <li>required: (<code>bool</code>, <code>default=True</code>) \u2013 The argument is required if the value is missing: an Exception will occur.</li> <li>type: (<code>Type</code> | <code>tuple[Type]</code>, <code>optional</code>) \u2013 Defines the type(s) of values accepted for this argument, if the type provided is not valid an Exception will occur.</li> <li>validator: (<code>Validator</code> | <code>tuple[Validator]</code>, <code>optional</code>) \u2013 One or more instances of validators constraining the value that an argument can have.</li> <li>choices: (<code>tuple</code>, <code>optional</code>) \u2013 A list of choices limiting the values that the supplied arguments can have.</li> </ul> Full featured argument..<pre><code>from arganic.arguments import Argument, class_properties, ArgumentHandler  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\n@class_properties(\n    arg1=Argument(\n        type=(str, list, tuple),  # Multiple types are supported.\n        required=False,  # This argument is not required.\n        default='first',  # A default value.\n        read_only=False,  # This Argument/property is not writeable.\n        choices=('first', 'second', ['first', 'second'], ('first', 'second')),  # Available choices.\n        validator=(MinLength(1), MaxLength(10))  # Validators.\n    )\n)\nclass FullFeaturedArgument(ArgumentHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def get_arg1(self) -&gt; str | list | tuple:\n        return self.get('arg1')\n\n\n# 'first' value is allowed in choices options\nffa1 = FullFeaturedArgument(arg1='first')\nprint(ffa1.get_arg1())\n\n# arg1 is not required and will take de the default value 'first'\nffa2 = FullFeaturedArgument()\nprint(ffa2.get_arg1())\n\n# arg1 can be a tuple\nffa3 = FullFeaturedArgument(arg1=('first', 'second'))\nprint(ffa3.get_arg1())\n\n# arg1 can be a list\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\n\n# arg1 can be set\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\nffa4.set('arg1', 'second')\nprint(ffa4.get_arg1())\n</code></pre>"},{"location":"#custom-validators","title":"Custom validators","text":"<p>It's possible to define your own validators by extending the Validator class.</p> A custom validator example.<pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Validator\n\n\nclass CityValidator(Validator):\n    \"\"\"\n    Custom validator class.\n    \"\"\"\n    def validate(self, value) -&gt; bool:\n        if value in ('Geneva', 'Paris', 'Lyon', 'Madrid'):\n            return True\n        raise ValueError('Invalid value')\n\n\n@function_arguments(\n    start=Argument(\n        type=str,\n        validator=CityValidator()\n    ),\n    destination=Argument(\n        type=str,\n        validator=CityValidator()\n    )\n)\ndef drive(*args, **kwargs) -&gt; None:\n    print('Drive')\n    print('start', drive.arguments.get('start'))\n    print('destination', drive.arguments.get('destination'))\n    return drive.arguments.values\n\n\ndrive(start='Geneva', destination='Paris')\ndrive(start='Lyon', destination='Geneva')\ndrive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>This project is open and gratefully accepts any form of contribution.</p>"},{"location":"#contributing-to-the-code","title":"Contributing to the code","text":"<p>Create a virtual env:</p> <pre><code>cd Arganic\npython -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Test the code:</p> <pre><code>pytest --cov=arganic/\n</code></pre> <p>Create a feature branch:</p> <pre><code>git checkout -b my-feature\n</code></pre> <p>Add your code and test it again Update the documentation under the docs/</p> <pre><code>mkdocs serve\n</code></pre> <p>Submit a push request...</p>"},{"location":"#issues","title":"Issues","text":"<p>If you find a bug, please post an issue on the issue tracker on GitHub.</p> <p>To help reproduce the bug, please provide a minimal reproducible example, including a code snippet and the full error message.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#arganic","title":"arganic","text":""},{"location":"reference/#arganic.arguments","title":"arguments","text":""},{"location":"reference/#arganic.arguments.Argument","title":"Argument","text":"<p>Argument class.</p> <p>Represents an argument with properties such as name, default value, and validation rules. Provides a method for validation.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the argument.</p> </li> <li> <code>default</code>             (<code>(Any, optional)</code>)         \u2013          <p>The default value of the argument.</p> </li> <li> <code>read_only</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is read-only.</p> </li> <li> <code>required</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is required.</p> </li> <li> <code>type</code>             (<code>(Type | tuple[Type], optional)</code>)         \u2013          <p>The data type(s) of the argument value.</p> </li> <li> <code>validator</code>             (<code>(Validator | tuple[Validator], optional)</code>)         \u2013          <p>A Validator object or list of Validator objects used to validate the argument value.</p> </li> <li> <code>choices</code>             (<code>(tuple, optional)</code>)         \u2013          <p>A tuple of choices the argument value can take.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>validate</code>           \u2013            <p>Validate the argument value based on the specified rules.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction:</p> <pre><code>from arganic.arguments import Argument, class_properties, ArgumentHandler  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\n@class_properties(\n    arg1=Argument(\n        type=(str, list, tuple),  # Multiple types are supported.\n        required=False,  # This argument is not required.\n        default='first',  # A default value.\n        read_only=False,  # This Argument/property is not writeable.\n        choices=('first', 'second', ['first', 'second'], ('first', 'second')),  # Available choices.\n        validator=(MinLength(1), MaxLength(10))  # Validators.\n    )\n)\nclass FullFeaturedArgument(ArgumentHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def get_arg1(self) -&gt; str | list | tuple:\n        return self.get('arg1')\n\n\n# 'first' value is allowed in choices options\nffa1 = FullFeaturedArgument(arg1='first')\nprint(ffa1.get_arg1())\n\n# arg1 is not required and will take de the default value 'first'\nffa2 = FullFeaturedArgument()\nprint(ffa2.get_arg1())\n\n# arg1 can be a tuple\nffa3 = FullFeaturedArgument(arg1=('first', 'second'))\nprint(ffa3.get_arg1())\n\n# arg1 can be a list\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\n\n# arg1 can be set\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\nffa4.set('arg1', 'second')\nprint(ffa4.get_arg1())\n</code></pre>"},{"location":"reference/#arganic.arguments.Argument.choices","title":"choices  <code>property</code>","text":"<pre><code>choices: tuple\n</code></pre> <p><code>Optional</code></p> <p>A list of choices limiting the values that the supplied arguments can have.</p>"},{"location":"reference/#arganic.arguments.Argument.default","title":"default  <code>property</code>","text":"<pre><code>default: Any\n</code></pre> <p><code>Optional</code></p> <p>The default value the argument will take if no value is provided.</p>"},{"location":"reference/#arganic.arguments.Argument.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The argument name.</p>"},{"location":"reference/#arganic.arguments.Argument.read_only","title":"read_only  <code>property</code>","text":"<pre><code>read_only: bool\n</code></pre> <p><code>Default=True</code></p> <p>The argument is read-only, so it can no longer be modified.</p>"},{"location":"reference/#arganic.arguments.Argument.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p><code>Default=True</code></p> <p>The argument is required if the value is missing: an Exception will occur.</p>"},{"location":"reference/#arganic.arguments.Argument.type","title":"type  <code>property</code>","text":"<pre><code>type: Type | tuple[Type]\n</code></pre> <p><code>Optional</code></p> <p>Defines the type(s) of values accepted for this argument, if the type provided is not valid an Exception will occur.</p>"},{"location":"reference/#arganic.arguments.Argument.validator","title":"validator  <code>property</code>","text":"<pre><code>validator: Validator | tuple[Validator]\n</code></pre> <p><code>Optional</code></p> <p>One or more instances of <code>Validators</code> constraining the value that an argument can have.</p>"},{"location":"reference/#arganic.arguments.Argument.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; bool\n</code></pre> <p>Validate the argument value based on the specified rules.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the value is valid, False otherwise.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the value is not of the specified type.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If the value is required but not provided, or if it is not among the specified choices.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.ArgumentHandler","title":"ArgumentHandler","text":"<p>Handles arguments or properties for decorated classes, methods or functions.</p> <p>Attributes</p> <p>values: dict     The provided arguments values validated and correctly formatted.</p> <p>Methods:</p> <ul> <li> <code>get</code>           \u2013            <p>Retrieves the value of a specified argument or property.</p> </li> <li> <code>set</code>           \u2013            <p>Sets the value of a specified argument or property.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.ArgumentHandler.values","title":"values  <code>property</code>","text":"<pre><code>values: dict\n</code></pre> <p>The validated values.</p>"},{"location":"reference/#arganic.arguments.ArgumentHandler.get","title":"get","text":"<pre><code>get(key: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a specified argument or property.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument or property to retrieve.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The value of the argument or property.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.ArgumentHandler.set","title":"set","text":"<pre><code>set(key: str, value: Any) -&gt; None\n</code></pre> <p>Sets the value of arguments or properties to the specified key.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument to set.</p> </li> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The new value for the argument.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>if the argument is not writeable.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.class_properties","title":"class_properties","text":"<pre><code>class_properties(**_properties: Argument) -&gt; Callable\n</code></pre> <p>Decorator for class properties.</p> <p>A decorator for class properties allowing you to define the data managed by the class during construction and then access these values within the class.</p> <p>Parameters:</p> <ul> <li> <code>_properties</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.function_arguments","title":"function_arguments","text":"<pre><code>function_arguments(**_arguments: Argument) -&gt; Callable\n</code></pre> <p>Decorator for function arguments.</p> <p>A decorator for functions allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the function.</p> <p>Parameters:</p> <ul> <li> <code>_arguments</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.method_arguments","title":"method_arguments","text":"<pre><code>method_arguments(**_arguments: Argument) -&gt; Callable\n</code></pre> <p>Decorator for method arguments.</p> <p>A decorator for class methods allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the method.</p> <p>Parameters:</p> <ul> <li> <code>_arguments</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/#arganic.validators","title":"validators","text":""},{"location":"reference/#arganic.validators.Dir","title":"Dir","text":"<p>             Bases: <code>Validator</code></p> <p>Directory Validator.</p>"},{"location":"reference/#arganic.validators.Dir.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a directory according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the directory that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the directory exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the directory does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Dir\n\n\n@function_arguments(\n    dir=Argument(\n        type=str,\n        validator=Dir()\n    )\n)\ndef dir_handler(*args, **kwargs) -&gt; str:\n    print(dir_handler.arguments.get('dir'))\n    return dir_handler.arguments.get('dir')\n\n\n# Validation\ndir_handler(dir='tests/examples/validate_dir')\n</code></pre>"},{"location":"reference/#arganic.validators.Email","title":"Email","text":"<p>             Bases: <code>Validator</code></p> <p>Email address Validator.</p>"},{"location":"reference/#arganic.validators.Email.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates the syntax of an email address.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Email address whose syntax must be checked.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>If the value provided is a correct email address format.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the value provided is not a valid email address.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Email\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    email=Argument(\n        type=str,\n        validator=Email()\n    )\n)\ndef email_handler(*args, **kwargs) -&gt; str:\n    print(email_handler.arguments.get('email'))\n    return email_handler.arguments.get('email')\n\n\n# Validation\nemail_handler(email='example@example.com')\n</code></pre>"},{"location":"reference/#arganic.validators.File","title":"File","text":"<p>             Bases: <code>Validator</code></p> <p>File Validator</p>"},{"location":"reference/#arganic.validators.File.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a file according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the file that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the file exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the file does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import File\n\n\n@function_arguments(\n    file=Argument(\n        type=str,\n        validator=File()\n    )\n)\ndef file_handler(*args, **kwargs) -&gt; str:\n    print(file_handler.arguments.get('file'))\n    return file_handler.arguments.get('file')\n\n\n# Validation\nfile_handler(file='tests/examples/validate_dir/validate_file.txt')\n</code></pre>"},{"location":"reference/#arganic.validators.MaxLength","title":"MaxLength","text":"<p>             Bases: <code>Validator</code></p> <p>Maximum length validator.</p>"},{"location":"reference/#arganic.validators.MaxLength.__init__","title":"__init__","text":"<pre><code>__init__(max_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>max_length</code>             (<code>int</code>)         \u2013          <p>The maximum length that the values to validate must not exceed.</p> </li> </ul>"},{"location":"reference/#arganic.validators.MaxLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates a value whose maximum length must not be greater than the value specified in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is longer than the specified maximum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MaxLength\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    max_len=Argument(\n        type=str,\n        validator=MaxLength(10)\n    )\n)\ndef max_len_10_handler(*args, **kwargs) -&gt; str:\n    print(max_len_10_handler.arguments.get('max_len'))\n    return max_len_10_handler.arguments.get('max_len')\n\n\n@function_arguments(\n    max_len=Argument(\n        type=str,\n        validator=MaxLength(1)\n    )\n)\ndef max_len_1_handler(*args, **kwargs) -&gt; str:\n    print(max_len_1_handler.arguments.get('max_len'))\n    return max_len_1_handler.arguments.get('max_len')\n\n\n# Validation\nmax_len_10_handler(max_len='example')\n# Validation\nmax_len_1_handler(max_len='e')\n</code></pre>"},{"location":"reference/#arganic.validators.MinLength","title":"MinLength","text":"<p>             Bases: <code>Validator</code></p> <p>Minimum length validator.</p>"},{"location":"reference/#arganic.validators.MinLength.__init__","title":"__init__","text":"<pre><code>__init__(min_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>min_length</code>             (<code>int</code>)         \u2013          <p>The minimum length that the value must be.</p> </li> </ul>"},{"location":"reference/#arganic.validators.MinLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Verifies that the provided value have a length must be at least the minimum value given in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is shorter than the specified minimum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MinLength\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    min_len=Argument(\n        type=str,\n        validator=MinLength(1)\n    )\n)\ndef min_len_1_handler(*args, **kwargs) -&gt; str:\n    return min_len_1_handler.arguments.get('min_len')\n\n\n@function_arguments(\n    min_len=Argument(\n        type=str,\n        validator=MinLength(10)\n    )\n)\ndef min_len_10_handler(*args, **kwargs) -&gt; str:\n    print(min_len_10_handler.arguments.get('min_len'))\n    return min_len_10_handler.arguments.get('min_len')\n\n\n# Validation\nmin_len_1_handler(min_len='example')\n# Validation\nmin_len_1_handler(min_len='example1234')\n</code></pre>"},{"location":"reference/#arganic.validators.Url","title":"Url","text":"<p>             Bases: <code>Validator</code></p> <p>URL Validator.</p>"},{"location":"reference/#arganic.validators.Url.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validate if an URL is well formatted. supported protocols: http, https, ftp, ftps.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value of the URL to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the URL is well formatted.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the provided value is an invalid Url.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Url\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    url=Argument(\n        type=str,\n        validator=Url()\n    )\n)\ndef url_handler(*args, **kwargs) -&gt; str:\n    print(url_handler.arguments.get('url'))\n    return url_handler.arguments.get('url')\n\n\n# Validation\nurl_handler(url='https://www.example.com')\n</code></pre>"},{"location":"reference/#arganic.validators.Validator","title":"Validator","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for validators.</p> <p>It's possible to define your own validators by extending this class.</p> <p>Examples:</p> <p>Example of a custom validator.</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Validator\n\n\nclass CityValidator(Validator):\n    \"\"\"\n    Custom validator class.\n    \"\"\"\n    def validate(self, value) -&gt; bool:\n        if value in ('Geneva', 'Paris', 'Lyon', 'Madrid'):\n            return True\n        raise ValueError('Invalid value')\n\n\n@function_arguments(\n    start=Argument(\n        type=str,\n        validator=CityValidator()\n    ),\n    destination=Argument(\n        type=str,\n        validator=CityValidator()\n    )\n)\ndef drive(*args, **kwargs) -&gt; None:\n    print('Drive')\n    print('start', drive.arguments.get('start'))\n    print('destination', drive.arguments.get('destination'))\n    return drive.arguments.values\n\n\ndrive(start='Geneva', destination='Paris')\ndrive(start='Lyon', destination='Geneva')\ndrive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"reference/#arganic.validators.Validator.validate","title":"validate  <code>abstractmethod</code>","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Override this method on inherited classes.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>The validate() methods needs to return True if the validation pass or raises an exception if the validation fails.</p> </li> </ul>"},{"location":"reference/arguments/","title":"Arguments","text":""},{"location":"reference/arguments/#arganic.arguments","title":"arganic.arguments","text":""},{"location":"reference/arguments/#arganic.arguments.Argument","title":"Argument","text":"<p>Argument class.</p> <p>Represents an argument with properties such as name, default value, and validation rules. Provides a method for validation.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the argument.</p> </li> <li> <code>default</code>             (<code>(Any, optional)</code>)         \u2013          <p>The default value of the argument.</p> </li> <li> <code>read_only</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is read-only.</p> </li> <li> <code>required</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is required.</p> </li> <li> <code>type</code>             (<code>(Type | tuple[Type], optional)</code>)         \u2013          <p>The data type(s) of the argument value.</p> </li> <li> <code>validator</code>             (<code>(Validator | tuple[Validator], optional)</code>)         \u2013          <p>A Validator object or list of Validator objects used to validate the argument value.</p> </li> <li> <code>choices</code>             (<code>(tuple, optional)</code>)         \u2013          <p>A tuple of choices the argument value can take.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>validate</code>           \u2013            <p>Validate the argument value based on the specified rules.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction:</p> <pre><code>from arganic.arguments import Argument, class_properties, ArgumentHandler  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\n@class_properties(\n    arg1=Argument(\n        type=(str, list, tuple),  # Multiple types are supported.\n        required=False,  # This argument is not required.\n        default='first',  # A default value.\n        read_only=False,  # This Argument/property is not writeable.\n        choices=('first', 'second', ['first', 'second'], ('first', 'second')),  # Available choices.\n        validator=(MinLength(1), MaxLength(10))  # Validators.\n    )\n)\nclass FullFeaturedArgument(ArgumentHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def get_arg1(self) -&gt; str | list | tuple:\n        return self.get('arg1')\n\n\n# 'first' value is allowed in choices options\nffa1 = FullFeaturedArgument(arg1='first')\nprint(ffa1.get_arg1())\n\n# arg1 is not required and will take de the default value 'first'\nffa2 = FullFeaturedArgument()\nprint(ffa2.get_arg1())\n\n# arg1 can be a tuple\nffa3 = FullFeaturedArgument(arg1=('first', 'second'))\nprint(ffa3.get_arg1())\n\n# arg1 can be a list\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\n\n# arg1 can be set\nffa4 = FullFeaturedArgument(arg1=['first', 'second'])\nprint(ffa4.get_arg1())\nffa4.set('arg1', 'second')\nprint(ffa4.get_arg1())\n</code></pre>"},{"location":"reference/arguments/#arganic.arguments.Argument.choices","title":"choices  <code>property</code>","text":"<pre><code>choices: tuple\n</code></pre> <p><code>Optional</code></p> <p>A list of choices limiting the values that the supplied arguments can have.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.default","title":"default  <code>property</code>","text":"<pre><code>default: Any\n</code></pre> <p><code>Optional</code></p> <p>The default value the argument will take if no value is provided.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The argument name.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.read_only","title":"read_only  <code>property</code>","text":"<pre><code>read_only: bool\n</code></pre> <p><code>Default=True</code></p> <p>The argument is read-only, so it can no longer be modified.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p><code>Default=True</code></p> <p>The argument is required if the value is missing: an Exception will occur.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.type","title":"type  <code>property</code>","text":"<pre><code>type: Type | tuple[Type]\n</code></pre> <p><code>Optional</code></p> <p>Defines the type(s) of values accepted for this argument, if the type provided is not valid an Exception will occur.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.validator","title":"validator  <code>property</code>","text":"<pre><code>validator: Validator | tuple[Validator]\n</code></pre> <p><code>Optional</code></p> <p>One or more instances of <code>Validators</code> constraining the value that an argument can have.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; bool\n</code></pre> <p>Validate the argument value based on the specified rules.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the value is valid, False otherwise.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the value is not of the specified type.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If the value is required but not provided, or if it is not among the specified choices.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler","title":"ArgumentHandler","text":"<p>Handles arguments or properties for decorated classes, methods or functions.</p> <p>Attributes</p> <p>values: dict     The provided arguments values validated and correctly formatted.</p> <p>Methods:</p> <ul> <li> <code>get</code>           \u2013            <p>Retrieves the value of a specified argument or property.</p> </li> <li> <code>set</code>           \u2013            <p>Sets the value of a specified argument or property.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler.values","title":"values  <code>property</code>","text":"<pre><code>values: dict\n</code></pre> <p>The validated values.</p>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler.get","title":"get","text":"<pre><code>get(key: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a specified argument or property.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument or property to retrieve.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The value of the argument or property.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler.set","title":"set","text":"<pre><code>set(key: str, value: Any) -&gt; None\n</code></pre> <p>Sets the value of arguments or properties to the specified key.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument to set.</p> </li> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The new value for the argument.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>if the argument is not writeable.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.class_properties","title":"class_properties","text":"<pre><code>class_properties(**_properties: Argument) -&gt; Callable\n</code></pre> <p>Decorator for class properties.</p> <p>A decorator for class properties allowing you to define the data managed by the class during construction and then access these values within the class.</p> <p>Parameters:</p> <ul> <li> <code>_properties</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.function_arguments","title":"function_arguments","text":"<pre><code>function_arguments(**_arguments: Argument) -&gt; Callable\n</code></pre> <p>Decorator for function arguments.</p> <p>A decorator for functions allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the function.</p> <p>Parameters:</p> <ul> <li> <code>_arguments</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.method_arguments","title":"method_arguments","text":"<pre><code>method_arguments(**_arguments: Argument) -&gt; Callable\n</code></pre> <p>Decorator for method arguments.</p> <p>A decorator for class methods allowing you to constrain the arguments provided during the call but also to find the correctly formatted values within the method.</p> <p>Parameters:</p> <ul> <li> <code>_arguments</code>             (<code>Argument</code>, default:                 <code>{}</code> )         \u2013          <p>A dictionary of the Arguments the decorator will handle.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>         \u2013          <p>The decorator function.</p> </li> </ul>"},{"location":"reference/validators/","title":"Validators","text":""},{"location":"reference/validators/#arganic.validators","title":"arganic.validators","text":""},{"location":"reference/validators/#arganic.validators.Dir","title":"Dir","text":"<p>             Bases: <code>Validator</code></p> <p>Directory Validator.</p>"},{"location":"reference/validators/#arganic.validators.Dir.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a directory according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the directory that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the directory exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the directory does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Dir\n\n\n@function_arguments(\n    dir=Argument(\n        type=str,\n        validator=Dir()\n    )\n)\ndef dir_handler(*args, **kwargs) -&gt; str:\n    print(dir_handler.arguments.get('dir'))\n    return dir_handler.arguments.get('dir')\n\n\n# Validation\ndir_handler(dir='tests/examples/validate_dir')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Email","title":"Email","text":"<p>             Bases: <code>Validator</code></p> <p>Email address Validator.</p>"},{"location":"reference/validators/#arganic.validators.Email.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates the syntax of an email address.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Email address whose syntax must be checked.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>If the value provided is a correct email address format.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the value provided is not a valid email address.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Email\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    email=Argument(\n        type=str,\n        validator=Email()\n    )\n)\ndef email_handler(*args, **kwargs) -&gt; str:\n    print(email_handler.arguments.get('email'))\n    return email_handler.arguments.get('email')\n\n\n# Validation\nemail_handler(email='example@example.com')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.File","title":"File","text":"<p>             Bases: <code>Validator</code></p> <p>File Validator</p>"},{"location":"reference/validators/#arganic.validators.File.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a file according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the file that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the file exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the file does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import File\n\n\n@function_arguments(\n    file=Argument(\n        type=str,\n        validator=File()\n    )\n)\ndef file_handler(*args, **kwargs) -&gt; str:\n    print(file_handler.arguments.get('file'))\n    return file_handler.arguments.get('file')\n\n\n# Validation\nfile_handler(file='tests/examples/validate_dir/validate_file.txt')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.MaxLength","title":"MaxLength","text":"<p>             Bases: <code>Validator</code></p> <p>Maximum length validator.</p>"},{"location":"reference/validators/#arganic.validators.MaxLength.__init__","title":"__init__","text":"<pre><code>__init__(max_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>max_length</code>             (<code>int</code>)         \u2013          <p>The maximum length that the values to validate must not exceed.</p> </li> </ul>"},{"location":"reference/validators/#arganic.validators.MaxLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates a value whose maximum length must not be greater than the value specified in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is longer than the specified maximum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MaxLength\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    max_len=Argument(\n        type=str,\n        validator=MaxLength(10)\n    )\n)\ndef max_len_10_handler(*args, **kwargs) -&gt; str:\n    print(max_len_10_handler.arguments.get('max_len'))\n    return max_len_10_handler.arguments.get('max_len')\n\n\n@function_arguments(\n    max_len=Argument(\n        type=str,\n        validator=MaxLength(1)\n    )\n)\ndef max_len_1_handler(*args, **kwargs) -&gt; str:\n    print(max_len_1_handler.arguments.get('max_len'))\n    return max_len_1_handler.arguments.get('max_len')\n\n\n# Validation\nmax_len_10_handler(max_len='example')\n# Validation\nmax_len_1_handler(max_len='e')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.MinLength","title":"MinLength","text":"<p>             Bases: <code>Validator</code></p> <p>Minimum length validator.</p>"},{"location":"reference/validators/#arganic.validators.MinLength.__init__","title":"__init__","text":"<pre><code>__init__(min_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>min_length</code>             (<code>int</code>)         \u2013          <p>The minimum length that the value must be.</p> </li> </ul>"},{"location":"reference/validators/#arganic.validators.MinLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Verifies that the provided value have a length must be at least the minimum value given in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is shorter than the specified minimum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MinLength\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    min_len=Argument(\n        type=str,\n        validator=MinLength(1)\n    )\n)\ndef min_len_1_handler(*args, **kwargs) -&gt; str:\n    return min_len_1_handler.arguments.get('min_len')\n\n\n@function_arguments(\n    min_len=Argument(\n        type=str,\n        validator=MinLength(10)\n    )\n)\ndef min_len_10_handler(*args, **kwargs) -&gt; str:\n    print(min_len_10_handler.arguments.get('min_len'))\n    return min_len_10_handler.arguments.get('min_len')\n\n\n# Validation\nmin_len_1_handler(min_len='example')\n# Validation\nmin_len_1_handler(min_len='example1234')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Url","title":"Url","text":"<p>             Bases: <code>Validator</code></p> <p>URL Validator.</p>"},{"location":"reference/validators/#arganic.validators.Url.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validate if an URL is well formatted. supported protocols: http, https, ftp, ftps.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value of the URL to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the URL is well formatted.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the provided value is an invalid Url.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Url\nfrom arganic.arguments import function_arguments, Argument\n\n\n@function_arguments(\n    url=Argument(\n        type=str,\n        validator=Url()\n    )\n)\ndef url_handler(*args, **kwargs) -&gt; str:\n    print(url_handler.arguments.get('url'))\n    return url_handler.arguments.get('url')\n\n\n# Validation\nurl_handler(url='https://www.example.com')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Validator","title":"Validator","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for validators.</p> <p>It's possible to define your own validators by extending this class.</p> <p>Examples:</p> <p>Example of a custom validator.</p> <pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Validator\n\n\nclass CityValidator(Validator):\n    \"\"\"\n    Custom validator class.\n    \"\"\"\n    def validate(self, value) -&gt; bool:\n        if value in ('Geneva', 'Paris', 'Lyon', 'Madrid'):\n            return True\n        raise ValueError('Invalid value')\n\n\n@function_arguments(\n    start=Argument(\n        type=str,\n        validator=CityValidator()\n    ),\n    destination=Argument(\n        type=str,\n        validator=CityValidator()\n    )\n)\ndef drive(*args, **kwargs) -&gt; None:\n    print('Drive')\n    print('start', drive.arguments.get('start'))\n    print('destination', drive.arguments.get('destination'))\n    return drive.arguments.values\n\n\ndrive(start='Geneva', destination='Paris')\ndrive(start='Lyon', destination='Geneva')\ndrive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Validator.validate","title":"validate  <code>abstractmethod</code>","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Override this method on inherited classes.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>The validate() methods needs to return True if the validation pass or raises an exception if the validation fails.</p> </li> </ul>"},{"location":"releases/","title":"Release Notes","text":""}]}