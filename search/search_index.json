{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arganic","text":"<p>Arganic is a lightweight Python library making it easy to manage Arguments for Classes, Methods or Functions.</p> <p>The library provides a very simpel and comprehensive set of decorators with advanced features such as required arguments, validators, type checking, read/write accesses, default values, and choices.</p> <p>By leveraging Python's <code>*args</code> and <code>**kwargs</code>, Arganic empowers developers to enhance the readability and functionality of their codebase with ease.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li>Decorators for Classes, Methods, and Functions: Apply decorators to classes, methods, and functions to extend their functionality and behavior.</li> <li>Required Parameters: Define required parameters for methods and functions to ensure essential inputs are provided.</li> <li>Validator Support: Validate method arguments, function parameters, and class properties using built-in or custom validators.</li> <li>Type Checking: Enforce type constraints and ensure type consistency with flexible type checking capabilities.</li> <li>Read/Write Access Control: Define read-only properties for classes, methods, and functions as needed.</li> <li>Default Values: Set default values for function arguments, method parameters, and class properties to streamline code logic.</li> <li>Choice Selection: Specify a list of choices for method arguments and function parameters, restricting input values to predefined options.</li> </ul> <p> Read the full documentation </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"Pip","text":"<p>Install Arganic via the pip command:</p> <pre><code>pip install arganic\n</code></pre>"},{"location":"#git-clone","title":"Git clone","text":"<p>Clone the github repository:</p> <pre><code>git clone https://github.com/Kiwea/arganic\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#decorating-classes","title":"Decorating Classes","text":"<p>Example on how to decorate a Class and access the arguments as class properties.</p> <p>Note: the class need to extends ArgumentHandler to implement get and set methods.</p> A simple Vehicle class with three arguments/properties.<pre><code>from arganic.arguments import class_properties, Argument, ArgumentHandler\n\n\n@class_properties(\n    name=Argument(\n        type=str,\n    ),\n    type=Argument(\n        type=str,\n        choices=('car', 'truck', 'bike'),\n        default='car'\n    ),\n    description=Argument(\n        type=str,\n        required=False\n    ),\n\n)\nclass Vehicle(ArgumentHandler):\n    def __init__(self, *args, **kwargs) -&gt; None:\n        super().__init__(*args, **kwargs)\n        print(self.get('name'))\n        print(self.get('type'))\n        print(self.get('description'))\n\n\ncar_1 = Vehicle(name=\"Red car\")\nbike_1 = Vehicle(name=\"Yellow bike\", type=\"bike\")\ntruck_1 = Vehicle(name=\"Blue truck\", type=\"truck\", description=\"Very heavy truck.\")\n</code></pre>"},{"location":"#decorating-methods","title":"Decorating Methods","text":"<p>Example with a class method decorator</p> A simple method with two arguments.<pre><code>from arganic.arguments import method_arguments, Argument\n\n\nclass Vehicle():\n\n    @method_arguments(\n        start=Argument(\n            type=str\n        ),\n        destination=Argument(\n            type=str\n        )\n    )\n    def drive(self, *args, **kwargs) -&gt; None:\n        print('Drive')\n        print('start', self.drive.arguments.get('start'))\n        print('destination', self.drive.arguments.get('destination'))\n\n\ncar_1 = Vehicle()\ncar_1.drive(start='Geneva', destination='Paris')\nbike_1 = Vehicle()\nbike_1.drive(start='Lyon', destination='Geneva')\ntruck_1 = Vehicle()\ntruck_1.drive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"#decorating-functions","title":"Decorating functions","text":"<p>The same example with a simple function.</p> A simple function with two arguments.<pre><code>from arganic.arguments import function_arguments, Argument\n\n@function_arguments(\n    start=Argument(\n        type=str\n    ),\n    destination=Argument(\n        type=str\n    )\n)\ndef drive(*args, **kwargs) -&gt; None:\n    print('Drive')\n    print('start', drive.arguments.get('start'))\n    print('destination', drive.arguments.get('destination'))\n\n\ndrive(start='Geneva', destination='Paris')\ndrive(start='Lyon', destination='Geneva')\ndrive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"#arguments-parameters","title":"Arguments parameters","text":"<p>List of the available parameters the Arguments class can take:</p> <ul> <li>default: (Any, optional) - The default value of the argument.</li> <li>read_only: (bool, Default=True) - The default value of the argument.</li> <li>required: (bool, default=True) \u2013 Whether the argument is required.</li> <li>type: (Type | tuple[Type], optional) \u2013 The data type(s) the argument value can take.</li> <li>validator: (Validator | tuple[Validator], optional) \u2013 A Validator object or list of Validator objects used to validate the argument value.</li> <li>choices (tuple, optional) \u2013 A tuple of choices the argument value can take.</li> </ul>"},{"location":"#custom-validators","title":"Custom validators","text":"<p>It's possible to define your own validators by extending the Validator class.</p> A custom validator example.<pre><code>from arganic.arguments import function_arguments, Argument\nfrom arganic.validators import Validator\n\n\nclass MyValidator(Validator):\n\n    def validate(self, value) -&gt; bool:\n        if value in ('Geneva', 'Paris', 'Lyon', 'Madrid'):\n            return True\n        raise ValueError('Invalid value')\n\n\n@function_arguments(\n    start=Argument(\n        type=str,\n        validator=MyValidator()\n    ),\n    destination=Argument(\n        type=str,\n        validator=MyValidator()\n    )\n)\ndef drive(*args, **kwargs) -&gt; None:\n    print('Drive')\n    print('start', drive.arguments.get('start'))\n    print('destination', drive.arguments.get('destination'))\n\n\ndrive(start='Geneva', destination='Paris')\ndrive(start='Lyon', destination='Geneva')\ndrive(start='Madrid', destination='Paris')\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>This project is open to contributors :</p> <p>Create a virtual env:</p> <pre><code>cd Arganic\npython -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Test the code:</p> <pre><code>pytest --cov=arganic/\n</code></pre> <p>Create a feature branch:</p> <pre><code>git checkout -b my-feature\n</code></pre> <p>Add your code and test it again Update the documentation under the docs/</p> <pre><code>mkdocs serve\n</code></pre> <p>Submit a push request</p> <p>Issues</p> <p>If you find a bug, please post an issue on the issue tracker on GitHub.</p> <p>To help reproduce the bug, please provide a minimal reproducible example, including a code snippet and the full error message.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#arganic","title":"arganic","text":""},{"location":"reference/#arganic.arguments","title":"arguments","text":""},{"location":"reference/#arganic.arguments.Argument","title":"Argument","text":"<p>Argument class.</p> <p>Represents an argument with properties such as name, default value, and validation rules. Provides a method for validation.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the argument.</p> </li> <li> <code>default</code>             (<code>(Any, optional)</code>)         \u2013          <p>The default value of the argument.</p> </li> <li> <code>read_only</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is read-only.</p> </li> <li> <code>required</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is required.</p> </li> <li> <code>type</code>             (<code>(Type | tuple[Type], optional)</code>)         \u2013          <p>The data type of the argument value.</p> </li> <li> <code>validator</code>             (<code>(Validator | tuple[Validator], optional)</code>)         \u2013          <p>A Validator object or list of Validator objects used to validate the argument value.</p> </li> <li> <code>choices</code>             (<code>(tuple, optional)</code>)         \u2013          <p>A tuple of choices the argument value can take.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>validate</code>           \u2013            <p>Validate the argument value based on the specified rules.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction:</p> <pre><code>from arganic.arguments import Argument, function_arguments  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\nArgument(\n    type=(str, list, tuple),  # Multiple types are supported.\n    required=False,  # This argument is not required.\n    default='default',  # A default value.\n    read_only=False,  # This Argument/property is not writeable.\n    choices=('default', ['first', 'second'], ('fist', 'second')),  # Available choices.\n    validator=(MinLength(1), MaxLength(10))  # Validators.\n)\n</code></pre>"},{"location":"reference/#arganic.arguments.Argument.choices","title":"choices  <code>property</code>","text":"<pre><code>choices: tuple\n</code></pre> <p>A tuple of choices the argument value can take.</p>"},{"location":"reference/#arganic.arguments.Argument.default","title":"default  <code>property</code>","text":"<pre><code>default: Any\n</code></pre> <p>The default value of the argument.</p>"},{"location":"reference/#arganic.arguments.Argument.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The argument name.</p>"},{"location":"reference/#arganic.arguments.Argument.read_only","title":"read_only  <code>property</code>","text":"<pre><code>read_only: bool\n</code></pre> <p>Default=True</p> <p>True if the argument is read-only, False otherwise.</p>"},{"location":"reference/#arganic.arguments.Argument.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p>Default=True</p> <p>True if the argument is required, False otherwise.</p>"},{"location":"reference/#arganic.arguments.Argument.type","title":"type  <code>property</code>","text":"<pre><code>type: Type | tuple[Type]\n</code></pre> <p>The data type(s) the argument value can take.</p>"},{"location":"reference/#arganic.arguments.Argument.validator","title":"validator  <code>property</code>","text":"<pre><code>validator: Validator | tuple[Validator]\n</code></pre> <p>The validator object or a tuple of validator objects.</p>"},{"location":"reference/#arganic.arguments.Argument.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; bool\n</code></pre> <p>Validate the argument value based on the specified rules.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the value is valid, False otherwise.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the value is not of the specified type.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If the value is required but not provided, or if it is not among the specified choices.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction with validation:</p> <pre><code>from arganic.arguments import Argument  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\nArgument(\n    type=(str, list, tuple),  # Multiple types are supported.\n    required=False,  # This argument is not required.\n    default='default',  # A default value.\n    read_only=False,  # This Argument/property is not writeable.\n    choices=('default', ['first', 'second'], ('fist', 'second')),  # Available choices.\n    validator=(MinLength(1), MaxLength(10))  # Validators.\n).validate(['first', 'second'])  # Value validation.\n</code></pre>"},{"location":"reference/#arganic.arguments.ArgumentHandler","title":"ArgumentHandler","text":"<p>Handles arguments or properties for decorated classes, methods or functions.</p> <p>Methods:</p> <ul> <li> <code>get</code>           \u2013            <p>Retrieves the value of a specified argument or property.</p> </li> <li> <code>set</code>           \u2013            <p>Sets the value of a specified argument or property.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.ArgumentHandler.get","title":"get","text":"<pre><code>get(key: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a specified argument or property.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument or property to retrieve.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The value of the argument or property.</p> </li> </ul>"},{"location":"reference/#arganic.arguments.ArgumentHandler.set","title":"set","text":"<pre><code>set(key: str, value: Any) -&gt; None\n</code></pre> <p>Sets the value of arguments or properties to the specified key.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument to set.</p> </li> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The new value for the argument.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>if the argument is not writeable.</p> </li> </ul>"},{"location":"reference/#arganic.validators","title":"validators","text":""},{"location":"reference/#arganic.validators.Dir","title":"Dir","text":"<p>             Bases: <code>Validator</code></p> <p>Directory Validator.</p>"},{"location":"reference/#arganic.validators.Dir.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a directory according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the directory that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the directory exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the directory does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Dir\n\n# Validation succeed\nDir().validate('../tests/test_dir')\n# Validation failure\nDir().validate('../tests/not_exists')\n</code></pre>"},{"location":"reference/#arganic.validators.Email","title":"Email","text":"<p>             Bases: <code>Validator</code></p> <p>Email address Validator.</p>"},{"location":"reference/#arganic.validators.Email.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates the syntax of an email address.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Email address whose syntax must be checked.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>If the value provided is a correct email address format.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the value provided is not a valid email address.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Email\n\n# Validation succeed\nEmail().validate('example@example.com')\n# Validation failure\nEmail().validate('this is not an email address')\n</code></pre>"},{"location":"reference/#arganic.validators.File","title":"File","text":"<p>             Bases: <code>Validator</code></p> <p>File Validator</p>"},{"location":"reference/#arganic.validators.File.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a file according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the file that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the file exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the file does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import File\n\n# Validation succeed\nFile().validate('../tests/test_dir/test_file.txt')\n# Validation failure\nFile().validate('../tests/not_exists')\n</code></pre>"},{"location":"reference/#arganic.validators.MaxLength","title":"MaxLength","text":"<p>             Bases: <code>Validator</code></p> <p>Maximum length validator.</p>"},{"location":"reference/#arganic.validators.MaxLength.__init__","title":"__init__","text":"<pre><code>__init__(max_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>max_length</code>             (<code>int</code>)         \u2013          <p>The maximum length that the values to validate must not exceed.</p> </li> </ul>"},{"location":"reference/#arganic.validators.MaxLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates a value whose maximum length must not be greater than the value specified in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is longer than the specified maximum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MaxLength\n\n# Validation succeed\nMaxLength(10).validate('example')\n# Validation failure\nMaxLength(1).validate('example')\n</code></pre>"},{"location":"reference/#arganic.validators.MinLength","title":"MinLength","text":"<p>             Bases: <code>Validator</code></p> <p>Minimum length validator.</p>"},{"location":"reference/#arganic.validators.MinLength.__init__","title":"__init__","text":"<pre><code>__init__(min_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>min_length</code>             (<code>int</code>)         \u2013          <p>The minimum length that the value must be.</p> </li> </ul>"},{"location":"reference/#arganic.validators.MinLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Verifies that the provided value have a length must be at least the minimum value given in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is shorter than the specified minimum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MinLength\n\n# Validation succeed\nMinLength(1).validate('example')\n# Validation failure\nMinLength(10).validate('example')\n</code></pre>"},{"location":"reference/#arganic.validators.Url","title":"Url","text":"<p>             Bases: <code>Validator</code></p> <p>URL Validator.</p>"},{"location":"reference/#arganic.validators.Url.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validate if an URL is well formatted. supported protocols: http, https, ftp, ftps.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value of the URL to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the URL is well formatted.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the provided value is an invalid Url.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Url\n\n# Validation succeed\nUrl().validate('https://www.example.com')\n# Validation failure\nUrl().validate('htp://example.com')\n</code></pre>"},{"location":"reference/#arganic.validators.Validator","title":"Validator","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for validators.</p>"},{"location":"reference/#arganic.validators.Validator.validate","title":"validate  <code>abstractmethod</code>","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Override this method on inherited classes.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>The validate() methods needs to return True if the validation pass or raises an exception if the validation fails.</p> </li> </ul>"},{"location":"reference/arguments/","title":"Arguments","text":""},{"location":"reference/arguments/#arganic.arguments","title":"arganic.arguments","text":""},{"location":"reference/arguments/#arganic.arguments.Argument","title":"Argument","text":"<p>Argument class.</p> <p>Represents an argument with properties such as name, default value, and validation rules. Provides a method for validation.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the argument.</p> </li> <li> <code>default</code>             (<code>(Any, optional)</code>)         \u2013          <p>The default value of the argument.</p> </li> <li> <code>read_only</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is read-only.</p> </li> <li> <code>required</code>             (<code>bool, default=True</code>)         \u2013          <p>Whether the argument is required.</p> </li> <li> <code>type</code>             (<code>(Type | tuple[Type], optional)</code>)         \u2013          <p>The data type of the argument value.</p> </li> <li> <code>validator</code>             (<code>(Validator | tuple[Validator], optional)</code>)         \u2013          <p>A Validator object or list of Validator objects used to validate the argument value.</p> </li> <li> <code>choices</code>             (<code>(tuple, optional)</code>)         \u2013          <p>A tuple of choices the argument value can take.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>validate</code>           \u2013            <p>Validate the argument value based on the specified rules.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction:</p> <pre><code>from arganic.arguments import Argument, function_arguments  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\nArgument(\n    type=(str, list, tuple),  # Multiple types are supported.\n    required=False,  # This argument is not required.\n    default='default',  # A default value.\n    read_only=False,  # This Argument/property is not writeable.\n    choices=('default', ['first', 'second'], ('fist', 'second')),  # Available choices.\n    validator=(MinLength(1), MaxLength(10))  # Validators.\n)\n</code></pre>"},{"location":"reference/arguments/#arganic.arguments.Argument.choices","title":"choices  <code>property</code>","text":"<pre><code>choices: tuple\n</code></pre> <p>A tuple of choices the argument value can take.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.default","title":"default  <code>property</code>","text":"<pre><code>default: Any\n</code></pre> <p>The default value of the argument.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The argument name.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.read_only","title":"read_only  <code>property</code>","text":"<pre><code>read_only: bool\n</code></pre> <p>Default=True</p> <p>True if the argument is read-only, False otherwise.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.required","title":"required  <code>property</code>","text":"<pre><code>required: bool\n</code></pre> <p>Default=True</p> <p>True if the argument is required, False otherwise.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.type","title":"type  <code>property</code>","text":"<pre><code>type: Type | tuple[Type]\n</code></pre> <p>The data type(s) the argument value can take.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.validator","title":"validator  <code>property</code>","text":"<pre><code>validator: Validator | tuple[Validator]\n</code></pre> <p>The validator object or a tuple of validator objects.</p>"},{"location":"reference/arguments/#arganic.arguments.Argument.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; bool\n</code></pre> <p>Validate the argument value based on the specified rules.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the value is valid, False otherwise.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the value is not of the specified type.</p> </li> <li> <code>ValueError</code>           \u2013          <p>If the value is required but not provided, or if it is not among the specified choices.</p> </li> </ul> <p>Examples:</p> <p>Example of a full-featured argument construction with validation:</p> <pre><code>from arganic.arguments import Argument  # Import Argument class.\nfrom arganic.validators import MinLength, MaxLength  # Import validators\n\n\n# Argument example\nArgument(\n    type=(str, list, tuple),  # Multiple types are supported.\n    required=False,  # This argument is not required.\n    default='default',  # A default value.\n    read_only=False,  # This Argument/property is not writeable.\n    choices=('default', ['first', 'second'], ('fist', 'second')),  # Available choices.\n    validator=(MinLength(1), MaxLength(10))  # Validators.\n).validate(['first', 'second'])  # Value validation.\n</code></pre>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler","title":"ArgumentHandler","text":"<p>Handles arguments or properties for decorated classes, methods or functions.</p> <p>Methods:</p> <ul> <li> <code>get</code>           \u2013            <p>Retrieves the value of a specified argument or property.</p> </li> <li> <code>set</code>           \u2013            <p>Sets the value of a specified argument or property.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler.get","title":"get","text":"<pre><code>get(key: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a specified argument or property.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument or property to retrieve.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The value of the argument or property.</p> </li> </ul>"},{"location":"reference/arguments/#arganic.arguments.ArgumentHandler.set","title":"set","text":"<pre><code>set(key: str, value: Any) -&gt; None\n</code></pre> <p>Sets the value of arguments or properties to the specified key.</p> <p>Parameters:</p> <ul> <li> <code>key</code>             (<code>str</code>)         \u2013          <p>The key of the argument to set.</p> </li> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The new value for the argument.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>if the argument is not writeable.</p> </li> </ul>"},{"location":"reference/validators/","title":"Validators","text":""},{"location":"reference/validators/#arganic.validators","title":"arganic.validators","text":""},{"location":"reference/validators/#arganic.validators.Dir","title":"Dir","text":"<p>             Bases: <code>Validator</code></p> <p>Directory Validator.</p>"},{"location":"reference/validators/#arganic.validators.Dir.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a directory according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the directory that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the directory exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the directory does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Dir\n\n# Validation succeed\nDir().validate('../tests/test_dir')\n# Validation failure\nDir().validate('../tests/not_exists')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Email","title":"Email","text":"<p>             Bases: <code>Validator</code></p> <p>Email address Validator.</p>"},{"location":"reference/validators/#arganic.validators.Email.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates the syntax of an email address.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Email address whose syntax must be checked.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>If the value provided is a correct email address format.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the value provided is not a valid email address.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Email\n\n# Validation succeed\nEmail().validate('example@example.com')\n# Validation failure\nEmail().validate('this is not an email address')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.File","title":"File","text":"<p>             Bases: <code>Validator</code></p> <p>File Validator</p>"},{"location":"reference/validators/#arganic.validators.File.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Test the existence of a file according to the path provided.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>Path to the file that must exist on the file system.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the file exists.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>           \u2013          <p>If the file does not exist on the file system.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import File\n\n# Validation succeed\nFile().validate('../tests/test_dir/test_file.txt')\n# Validation failure\nFile().validate('../tests/not_exists')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.MaxLength","title":"MaxLength","text":"<p>             Bases: <code>Validator</code></p> <p>Maximum length validator.</p>"},{"location":"reference/validators/#arganic.validators.MaxLength.__init__","title":"__init__","text":"<pre><code>__init__(max_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>max_length</code>             (<code>int</code>)         \u2013          <p>The maximum length that the values to validate must not exceed.</p> </li> </ul>"},{"location":"reference/validators/#arganic.validators.MaxLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validates a value whose maximum length must not be greater than the value specified in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is longer than the specified maximum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MaxLength\n\n# Validation succeed\nMaxLength(10).validate('example')\n# Validation failure\nMaxLength(1).validate('example')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.MinLength","title":"MinLength","text":"<p>             Bases: <code>Validator</code></p> <p>Minimum length validator.</p>"},{"location":"reference/validators/#arganic.validators.MinLength.__init__","title":"__init__","text":"<pre><code>__init__(min_length: int) -&gt; None\n</code></pre> <p>Max length Validator constructor.</p> <p>Parameters:</p> <ul> <li> <code>min_length</code>             (<code>int</code>)         \u2013          <p>The minimum length that the value must be.</p> </li> </ul>"},{"location":"reference/validators/#arganic.validators.MinLength.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Verifies that the provided value have a length must be at least the minimum value given in the validator constructor.</p> <p>The value must be of a type supporting the builtin len() Python function.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the validation succeeded.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the length of the value is shorter than the specified minimum length.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import MinLength\n\n# Validation succeed\nMinLength(1).validate('example')\n# Validation failure\nMinLength(10).validate('example')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Url","title":"Url","text":"<p>             Bases: <code>Validator</code></p> <p>URL Validator.</p>"},{"location":"reference/validators/#arganic.validators.Url.validate","title":"validate","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Validate if an URL is well formatted. supported protocols: http, https, ftp, ftps.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value of the URL to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the URL is well formatted.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the provided value is an invalid Url.</p> </li> </ul> <p>Examples:</p> <pre><code>from arganic.validators import Url\n\n# Validation succeed\nUrl().validate('https://www.example.com')\n# Validation failure\nUrl().validate('htp://example.com')\n</code></pre>"},{"location":"reference/validators/#arganic.validators.Validator","title":"Validator","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for validators.</p>"},{"location":"reference/validators/#arganic.validators.Validator.validate","title":"validate  <code>abstractmethod</code>","text":"<pre><code>validate(value) -&gt; bool\n</code></pre> <p>Override this method on inherited classes.</p> <p>Parameters:</p> <ul> <li> <code>value</code>         \u2013          <p>The value to validate.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>The validate() methods needs to return True if the validation pass or raises an exception if the validation fails.</p> </li> </ul>"},{"location":"releases/","title":"Release Notes","text":""}]}